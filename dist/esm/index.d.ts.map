{"mappings":";AAAA;IACE,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;CACX;AACD;IACE,KAAK,EAAE,MAAM,CAAC;IACd,MAAM,EAAE,MAAM,CAAC;CAChB;AACD,cAAqB,UAAU,GAAG,IAAI,CAAC;AEDvC;IACE;;OAEG;IACH,UAAU,EAAE,IAAI,CAAC;IACjB;;OAEG;IACH,YAAY,EAAE,OAAO,CAAC;IACtB,OAAO,EAAE,MAAM,CAAC;CACjB;AACD,6BAA8B,SAAQ,KAAK,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;IAC7E,YAAY,CAAC,EAAE,KAAK,GAAG,GAAG,CAAC;IAC3B,mBAAmB,EAAE,CAAC,MAAM,EAAE,4BAA4B,KAAK,MAAM,CAAC;IACtE,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,OAAO,CAAC,EAAE;QACR,SAAS,CAAC,EAAE,MAAM,CAAC;QACnB,sBAAsB,CAAC,EAAE,MAAM,CAAC;QAChC,2BAA2B,CAAC,EAAE,MAAM,CAAC;QACrC,aAAa,CAAC,EAAE,MAAM,CAAC;QACvB,SAAS,CAAC,EAAE,MAAM,CAAC;KACpB,CAAC;CACH;AACD;;;;;;;;;;;;GAYG;AACH,QAAA,MAAM,cAAc;uIAajB,mBAAmB;;;;CA4FrB,CAAC;AAKF,eAAe,cAAc,CAAC","sources":["src/src/model.ts","src/src/utils.ts","src/src/index.tsx","src/index.tsx"],"sourcesContent":[null,null,null,"import React, { Fragment, useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport classNames from 'classnames';\nimport { useMagnifiedViewProcessor } from './utils';\nimport { Region, Size } from './model';\nimport './style.scss';\n\ninterface SetMagnifiedViewRegionParams {\n  /**\n   * Auto updating window size\n   */\n  windowSize: Size;\n  /**\n   * Reference to the base image DOM element's bounding client rect\n   */\n  baseImageBox: DOMRect;\n  scrollY: number;\n}\ninterface ImageMagnifierProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  imageElement?: 'img' | any;\n  magnifiedViewRegion: (params: SetMagnifiedViewRegionParams) => Region;\n  isHidden?: boolean;\n  classes?: {\n    baseImage?: string;\n    magnifiedViewContainer?: string;\n    magnifiedViewInnerContainer?: string;\n    magnifiedView?: string;\n    magnifier?: string;\n  };\n}\n/**\n * # ImageMagnifier\n *\n * A superset of the native HTML `img` component that provides a magnified view of the image when hovered.\n *\n * ## Features\n * - Provides a magnified view of the image when hovered\n * - Since it is a superset of the `img` component, all the props of the `img` component are supported and\n *   therefore this component can be plugged in as a drop-in replacement for the `img` component.\n *\n * ## Current Limitations\n * - All the props are forwared to the base image except for the `ref`\n */\nconst ImageMagnifier = ({\n  // Self props\n  imageElement: ImageElement,\n  magnifiedViewRegion,\n  isHidden,\n  classes,\n\n  // img props\n  src,\n  className,\n  onMouseMove,\n  onMouseLeave,\n  ...otherProps\n}: ImageMagnifierProps) => {\n  const [\n    { baseImageZoomIndicatorRegion, zoomedImageVisibleRegion, zoomedImageViewportRegion, scrollY },\n    { baseImageRef, updateBaseImageCursorCoordinate, updateZoomedImageViewportRegion }\n  ] = useMagnifiedViewProcessor({ isHidden });\n\n  const magnifiedImageRef: any = useRef<HTMLImageElement>(null);\n  const [isMagnifierVisible, setIsMagnifierVisible] = useState(false);\n\n  // Window resize handler\n  const [windowSize, setWindowSize] = useState<Size>({ width: window.innerWidth, height: window.innerHeight });\n  useEffect(() => {\n    const onResize = () => {\n      setWindowSize({ width: window.innerWidth, height: window.innerHeight });\n    };\n\n    window.addEventListener('resize', onResize);\n\n    return () => window.removeEventListener('resize', onResize);\n  }, []);\n\n  useEffect(() => {\n    if (!baseImageRef.current || isHidden) return;\n    const baseImageBox: DOMRect = baseImageRef.current?.getBoundingClientRect();\n    updateZoomedImageViewportRegion(magnifiedViewRegion({ windowSize, baseImageBox, scrollY }));\n  }, [src, baseImageRef.current, windowSize, scrollY, isHidden]);\n\n  return (\n    <Fragment>\n      <ImageElement\n        src={src}\n        className={classNames('baseImage', classes?.baseImage, className)}\n        onMouseMove={(event: React.MouseEvent<HTMLImageElement>) => {\n          updateBaseImageCursorCoordinate({ x: event.clientX, y: event.clientY });\n          setIsMagnifierVisible(true);\n          onMouseMove?.(event);\n        }}\n        onMouseLeave={(e: React.MouseEvent<HTMLImageElement>) => {\n          setIsMagnifierVisible(false);\n          onMouseLeave?.(e);\n        }}\n        ref={baseImageRef as any}\n        {...otherProps}\n      />\n      {!isHidden && createPortal(\n        <>\n          <div\n            className={classNames(\n              'magnifiedViewContainer',\n              classes?.magnifiedViewContainer,\n              !isMagnifierVisible && 'invisible'\n            )}\n            style={{\n              left: zoomedImageViewportRegion.x,\n              top: zoomedImageViewportRegion.y,\n              width: zoomedImageViewportRegion.width,\n              height: zoomedImageViewportRegion.height\n            }}\n          >\n            <div className={classNames('magnifiedViewInnerContainer', classes?.magnifiedViewInnerContainer)}>\n              <ImageElement\n                src={src}\n                className={classNames('magnifiedView', classes?.magnifiedView)}\n                style={Object.assign(\n                  {},\n                  {\n                    width: zoomedImageVisibleRegion.width,\n                    height: zoomedImageVisibleRegion.height,\n                    marginLeft: -zoomedImageVisibleRegion.x,\n                    marginTop: -zoomedImageVisibleRegion.y\n                  }\n                )}\n                ref={magnifiedImageRef}\n              />\n            </div>\n          </div>\n          {isMagnifierVisible && !!baseImageZoomIndicatorRegion.width && !!baseImageZoomIndicatorRegion.height && (\n            <div\n              className={classNames('magnifier', classes?.magnifier)}\n              style={{\n                left: baseImageZoomIndicatorRegion.x,\n                top: baseImageZoomIndicatorRegion.y,\n                width: baseImageZoomIndicatorRegion.width,\n                height: baseImageZoomIndicatorRegion.height\n              }}\n            />\n          )}\n        </>,\n        document.body\n      )}\n    </Fragment>\n  );\n};\nImageMagnifier.defaultProps = {\n  imageElement: 'img'\n};\n\nexport default ImageMagnifier;\n"],"names":[],"version":3,"file":"index.d.ts.map"}