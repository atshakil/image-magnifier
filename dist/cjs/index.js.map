{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;ACQA,MAAM,sDAAgC,CAAC,gBACrC,YAAY,6BACZ,yBAAyB,uBACzB,mBAAmB,EACiB;IACpC,IAAI,CAAC,cAAc,OAAO,CAAC;IAC3B,MAAM,2BAA2B,0BAA0B,KAAK,GAAG,0BAA0B,MAAM;IAEnG,OAAO;QACL,GAAG,aAAa,IAAI;QACpB,GAAG,aAAa,GAAG;QACnB,OACE,aAAa,KAAK,IAAI,aAAa,MAAM,GACrC,aAAa,KAAK,GAAG,sBACrB,AAAC,aAAa,MAAM,GAAG,sBAAuB;QACpD,QACE,aAAa,MAAM,IAAI,aAAa,KAAK,GACrC,aAAa,MAAM,GAAG,sBACtB,AAAC,aAAa,KAAK,GAAG,sBAAuB;IACrD;AACF;AAQA,MAAM,0DAAoC,CAAC,gBACzC,YAAY,gCACZ,4BAA4B,6BAC5B,yBAAyB,WACzB,OAAO,EAC2B;IAClC,IAAI,CAAC,cAAc,OAAO,CAAC;IAE3B,MAAM,gCAAgC;QACpC,GAAG,KAAK,KAAK,CAAC,6BAA6B,KAAK,GAAG;QACnD,GAAG,KAAK,KAAK,CAAC,6BAA6B,MAAM,GAAG;IACtD;IACA,MAAM,6BAA6B;QACjC,KAAK,aAAa,GAAG,GAAG,8BAA8B,CAAC;QACvD,MAAM,aAAa,IAAI,GAAG,8BAA8B,CAAC;QACzD,QAAQ,aAAa,MAAM,GAAG,8BAA8B,CAAC;QAC7D,OAAO,aAAa,KAAK,GAAG,8BAA8B,CAAC;IAC7D;IAEA,IAAI,YAAY;IAChB,IAAI,YAAY;IAEhB,IAAI,0BAA0B,CAAC,GAAG,2BAA2B,IAAI,EAC/D,YAAY,aAAa,IAAI;SACxB,IAAI,0BAA0B,CAAC,GAAG,2BAA2B,KAAK,EACvE,YAAY,aAAa,KAAK,GAAG,6BAA6B,KAAK;SAEnE,YAAY,0BAA0B,CAAC,GAAG,8BAA8B,CAAC;IAG3E,IAAI,0BAA0B,CAAC,GAAG,2BAA2B,GAAG,EAC9D,YAAY,aAAa,GAAG;SACvB,IAAI,0BAA0B,CAAC,GAAG,2BAA2B,MAAM,EACxE,YAAY,aAAa,MAAM,GAAG,6BAA6B,MAAM;SAErE,YAAY,0BAA0B,CAAC,GAAG,8BAA8B,CAAC;IAG3E,OAAO;QACL,GAAG;QACH,GAAG,YAAY;IACjB;AACF;AAOA,MAAM,2CAAqB,CAAC,gBAC1B,YAAY,gCACZ,4BAA4B,6BAC5B,yBAAyB,EACA;IACzB,IAAI,CAAC,cAAc,OAAO,CAAC;IAE3B,MAAM,8CACJ,0BAA0B,KAAK,GAAG,6BAA6B,KAAK;IACtE,MAAM,+CACJ,0BAA0B,MAAM,GAAG,6BAA6B,MAAM;IACxE,MAAM,mBAAmB,cAAc,QAAQ;IAC/C,MAAM,oBAAoB,cAAc,SAAS;IAEjD,OAAO;QACL,OAAO;QACP,QAAQ;IACV;AACF;AASA,MAAM,0DAAoC,CAAC,gBACzC,YAAY,gCACZ,4BAA4B,6BAC5B,yBAAyB,4BACzB,wBAAwB,WACxB,OAAO,EACiC;IACxC,IAAI,CAAC,cAAc,OAAO,CAAC;IAE3B,MAAM,4BAA4B,6BAA6B,CAAC,GAAG,aAAa,CAAC;IACjF,MAAM,4BAA4B,6BAA6B,CAAC,GAAI,CAAA,aAAa,CAAC,GAAG,OAAM;IAC3F,MAAM,8BAA8B,aAAa,KAAK,GAAG,6BAA6B,KAAK;IAC3F,MAAM,8BAA8B,aAAa,MAAM,GAAG,6BAA6B,MAAM;IAC7F,MAAM,gCAAgC,4BAA4B;IAClE,MAAM,gCAAgC,4BAA4B;IAElE,MAAM,gCAAgC,yBAAyB,KAAK,GAAG,0BAA0B,KAAK;IACtG,MAAM,gCAAgC,yBAAyB,MAAM,GAAG,0BAA0B,MAAM;IACxG,MAAM,8BAA8B,gCAAgC;IACpE,MAAM,8BAA8B,gCAAgC;IAEpE,OAAO;QACL,GAAG;QACH,GAAG;IACL;AACF;AAMO,MAAM,4CAA4B,CAAC;IACxC,MAAM,gBAAgB;QAAE,qBAAqB;QAAK,UAAU;IAAM;IAClE,MAAM,uBAAE,mBAAmB,YAAE,QAAQ,EAAE,GAAG,OAAO,MAAM,CAAC,CAAC,GAAG,eAAe;IAE3E,MAAM,eAAe,CAAA,GAAA,mBAAK,EAAoB;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qBAAO,EAAE,OAAO,OAAO;IACrD,MAAM,CAAC,8BAA8B,gCAAgC,GAAG,CAAA,GAAA,qBAAO,EAAU;QACvF,GAAG;QACH,GAAG;QACH,OAAO;QACP,QAAQ;IACV;IACA,MAAM,CAAC,2BAA2B,6BAA6B,GAAG,CAAA,GAAA,qBAAO,EAAc;QAAE,GAAG;QAAG,GAAG;IAAE;IACpG,MAAM,CAAC,2BAA2B,6BAA6B,GAAG,CAAA,GAAA,qBAAO,EAAU;QACjF,GAAG;QACH,GAAG;QACH,OAAO;QACP,QAAQ;IACV;IACA,0GAA0G;IAC1G,MAAM,CAAC,0BAA0B,4BAA4B,GAAG,CAAA,GAAA,qBAAO,EAAU;QAAE,GAAG;QAAG,GAAG;QAAG,OAAO;QAAG,QAAQ;IAAE;IAEnH,uBAAuB;IACvB,MAAM,qCAAqC,CAAC,SAC1C,gCAAgC,CAAC,OAAU,CAAA;gBAAE,GAAG,IAAI;gBAAE,GAAG,MAAM;YAAC,CAAA;IAClE,MAAM,kCAAkC,CAAC,KAAE,CAAC,KAAE,CAAC,EAAc;QAC3D,MAAM,cAAc,KAAK,GAAG,CAAC,GAAG;QAChC,MAAM,cAAc,KAAK,GAAG,CAAC,GAAG;QAChC,6BAA6B;YAAE,GAAG;YAAa,GAAG;QAAY;IAChE;IACA,MAAM,kCAAkC,CAAC;QACvC,6BAA6B,CAAC,OAAU,CAAA;gBAAE,GAAG,IAAI;gBAAE,GAAG,MAAM;YAAC,CAAA;IAC/D;IACA,MAAM,iCAAiC,CAAC,SACtC,4BAA4B,CAAC,OAAU,CAAA;gBAAE,GAAG,IAAI;gBAAE,GAAG,MAAM;YAAC,CAAA;IAE9D,aAAa;IACb,CAAA,GAAA,sBAAQ,EAAE;QACR,MAAM,eAAe;YACnB,WAAW,OAAO,OAAO;QAC3B;QAEA,OAAO,gBAAgB,CAAC,UAAU;QAElC,OAAO;YACL,OAAO,mBAAmB,CAAC,UAAU;QACvC;IACF,GAAG,EAAE;IAEL,CAAA,GAAA,sBAAQ,EAAE;QACR,MAAM,eAAe,aAAa,OAAO,EAAE;QAC3C,mCACE,oDAA8B;0BAAE;uCAAc;iCAA2B;QAAoB;IAEjG,GAAG;QAAC,aAAa,OAAO;QAAE,0BAA0B,KAAK;QAAE,0BAA0B,MAAM;QAAE;QAAqB;KAAS;IAE3H,CAAA,GAAA,sBAAQ,EAAE;QACR,MAAM,eAAe,aAAa,OAAO,EAAE;QAC3C,mCACE,wDAAkC;0BAChC;0CACA;uCACA;qBACA;QACF;IAEJ,GAAG;QACD,aAAa,OAAO;QACpB,6BAA6B,KAAK;QAClC,6BAA6B,MAAM;QACnC,0BAA0B,CAAC;QAC3B,0BAA0B,CAAC;QAC3B;KACD;IAED,CAAA,GAAA,sBAAQ,EAAE;QACR,MAAM,eAAe,aAAa,OAAO,EAAE;QAC3C,+BACE,yCAAmB;0BAAE;0CAAc;uCAA8B;QAA0B;IAE/F,GAAG;QACD,aAAa,OAAO;QACpB,6BAA6B,KAAK;QAClC,6BAA6B,MAAM;QACnC,0BAA0B,KAAK;QAC/B,0BAA0B,MAAM;QAChC;KACD;IAED,CAAA,GAAA,sBAAQ,EAAE;QACR,MAAM,eAAe,aAAa,OAAO,EAAE;QAC3C,+BACE,wDAAkC;0BAChC;0CACA;uCACA;sCACA;qBACA;QACF;IAEJ,GAAG;QACD,aAAa,OAAO;QACpB,6BAA6B,KAAK;QAClC,6BAA6B,MAAM;QACnC,6BAA6B,CAAC;QAC9B,6BAA6B,CAAC;QAC9B,0BAA0B,KAAK;QAC/B,0BAA0B,MAAM;QAChC,yBAAyB,KAAK;QAC9B,yBAAyB,MAAM;QAC/B;QACA;KACD;IAED,OAAO;QACL;0CACE;uCACA;sCACA;qBACA;QACF;QACA;0BACE;6CACA;6CACA;QACF;KACD;AACH;;;;ADhPA;;;;;;;;;;;;CAYC,GACD,MAAM,uCAAiB,CAAC,EACtB,aAAa;AACb,cAAc,YAAY,uBAC1B,mBAAmB,YACnB,QAAQ,WACR,OAAO,OAEP,YAAY;AACZ,GAAG,aACH,SAAS,eACT,WAAW,gBACX,YAAY,EACZ,GAAG,YACiB;IACpB,MAAM,CACJ,gCAAE,4BAA4B,4BAAE,wBAAwB,6BAAE,yBAAyB,WAAE,OAAO,EAAE,EAC9F,gBAAE,YAAY,mCAAE,+BAA+B,mCAAE,+BAA+B,EAAE,CACnF,GAAG,CAAA,GAAA,yCAAwB,EAAE;kBAAE;IAAS;IAEzC,MAAM,oBAAyB,CAAA,GAAA,mBAAK,EAAoB;IACxD,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,qBAAO,EAAE;IAE7D,wBAAwB;IACxB,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qBAAO,EAAQ;QAAE,OAAO,OAAO,UAAU;QAAE,QAAQ,OAAO,WAAW;IAAC;IAC1G,CAAA,GAAA,sBAAQ,EAAE;QACR,MAAM,WAAW;YACf,cAAc;gBAAE,OAAO,OAAO,UAAU;gBAAE,QAAQ,OAAO,WAAW;YAAC;QACvE;QAEA,OAAO,gBAAgB,CAAC,UAAU;QAElC,OAAO,IAAM,OAAO,mBAAmB,CAAC,UAAU;IACpD,GAAG,EAAE;IAEL,CAAA,GAAA,sBAAQ,EAAE;QACR,IAAI,CAAC,aAAa,OAAO,IAAI,UAAU;QACvC,MAAM,eAAwB,aAAa,OAAO,EAAE;QACpD,gCAAgC,oBAAoB;wBAAE;0BAAY;qBAAc;QAAQ;IAC1F,GAAG;QAAC;QAAK,aAAa,OAAO;QAAE;QAAY;QAAS;KAAS;IAE7D,qBACE,iCAAC,CAAA,GAAA,qBAAO;;0BACN,gCAAC;gBACC,KAAK;gBACL,WAAW,CAAA,GAAA,2CAAS,EAAE,aAAa,SAAS,WAAW;gBACvD,aAAa,CAAC;oBACZ,gCAAgC;wBAAE,GAAG,MAAM,OAAO;wBAAE,GAAG,MAAM,OAAO;oBAAC;oBACrE,sBAAsB;oBACtB,cAAc;gBAChB;gBACA,cAAc,CAAC;oBACb,sBAAsB;oBACtB,eAAe;gBACjB;gBACA,KAAK;gBACJ,GAAG,UAAU;;YAEf,CAAC,0BAAY,CAAA,GAAA,4BAAW,gBACvB;;kCACE,gCAAC;wBACC,WAAW,CAAA,GAAA,2CAAS,EAClB,0BACA,SAAS,wBACT,CAAC,sBAAsB;wBAEzB,OAAO;4BACL,MAAM,0BAA0B,CAAC;4BACjC,KAAK,0BAA0B,CAAC;4BAChC,OAAO,0BAA0B,KAAK;4BACtC,QAAQ,0BAA0B,MAAM;wBAC1C;kCAEA,cAAA,gCAAC;4BAAI,WAAW,CAAA,GAAA,2CAAS,EAAE,+BAA+B,SAAS;sCACjE,cAAA,gCAAC;gCACC,KAAK;gCACL,WAAW,CAAA,GAAA,2CAAS,EAAE,iBAAiB,SAAS;gCAChD,OAAO,OAAO,MAAM,CAClB,CAAC,GACD;oCACE,OAAO,yBAAyB,KAAK;oCACrC,QAAQ,yBAAyB,MAAM;oCACvC,YAAY,CAAC,yBAAyB,CAAC;oCACvC,WAAW,CAAC,yBAAyB,CAAC;gCACxC;gCAEF,KAAK;;;;oBAIV,sBAAsB,CAAC,CAAC,6BAA6B,KAAK,IAAI,CAAC,CAAC,6BAA6B,MAAM,kBAClG,gCAAC;wBACC,WAAW,CAAA,GAAA,2CAAS,EAAE,aAAa,SAAS;wBAC5C,OAAO;4BACL,MAAM,6BAA6B,CAAC;4BACpC,KAAK,6BAA6B,CAAC;4BACnC,OAAO,6BAA6B,KAAK;4BACzC,QAAQ,6BAA6B,MAAM;wBAC7C;;;gBAIN,SAAS,IAAI;;;AAIrB;AACA,qCAAe,YAAY,GAAG;IAC5B,cAAc;AAChB;IAEA,2CAAe","sources":["src/index.tsx","src/utils.ts"],"sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport classNames from 'classnames';\nimport { useMagnifiedViewProcessor } from './utils';\nimport { Region, Size } from './model';\nimport './style.scss';\n\ninterface SetMagnifiedViewRegionParams {\n  /**\n   * Auto updating window size\n   */\n  windowSize: Size;\n  /**\n   * Reference to the base image DOM element's bounding client rect\n   */\n  baseImageBox: DOMRect;\n  scrollY: number;\n}\ninterface ImageMagnifierProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  imageElement?: 'img' | any;\n  magnifiedViewRegion: (params: SetMagnifiedViewRegionParams) => Region;\n  isHidden?: boolean;\n  classes?: {\n    baseImage?: string;\n    magnifiedViewContainer?: string;\n    magnifiedViewInnerContainer?: string;\n    magnifiedView?: string;\n    magnifier?: string;\n  };\n}\n/**\n * # ImageMagnifier\n *\n * A superset of the native HTML `img` component that provides a magnified view of the image when hovered.\n *\n * ## Features\n * - Provides a magnified view of the image when hovered\n * - Since it is a superset of the `img` component, all the props of the `img` component are supported and\n *   therefore this component can be plugged in as a drop-in replacement for the `img` component.\n *\n * ## Current Limitations\n * - All the props are forwared to the base image except for the `ref`\n */\nconst ImageMagnifier = ({\n  // Self props\n  imageElement: ImageElement,\n  magnifiedViewRegion,\n  isHidden,\n  classes,\n\n  // img props\n  src,\n  className,\n  onMouseMove,\n  onMouseLeave,\n  ...otherProps\n}: ImageMagnifierProps) => {\n  const [\n    { baseImageZoomIndicatorRegion, zoomedImageVisibleRegion, zoomedImageViewportRegion, scrollY },\n    { baseImageRef, updateBaseImageCursorCoordinate, updateZoomedImageViewportRegion }\n  ] = useMagnifiedViewProcessor({ isHidden });\n\n  const magnifiedImageRef: any = useRef<HTMLImageElement>(null);\n  const [isMagnifierVisible, setIsMagnifierVisible] = useState(false);\n\n  // Window resize handler\n  const [windowSize, setWindowSize] = useState<Size>({ width: window.innerWidth, height: window.innerHeight });\n  useEffect(() => {\n    const onResize = () => {\n      setWindowSize({ width: window.innerWidth, height: window.innerHeight });\n    };\n\n    window.addEventListener('resize', onResize);\n\n    return () => window.removeEventListener('resize', onResize);\n  }, []);\n\n  useEffect(() => {\n    if (!baseImageRef.current || isHidden) return;\n    const baseImageBox: DOMRect = baseImageRef.current?.getBoundingClientRect();\n    updateZoomedImageViewportRegion(magnifiedViewRegion({ windowSize, baseImageBox, scrollY }));\n  }, [src, baseImageRef.current, windowSize, scrollY, isHidden]);\n\n  return (\n    <Fragment>\n      <ImageElement\n        src={src}\n        className={classNames('baseImage', classes?.baseImage, className)}\n        onMouseMove={(event: React.MouseEvent<HTMLImageElement>) => {\n          updateBaseImageCursorCoordinate({ x: event.clientX, y: event.clientY });\n          setIsMagnifierVisible(true);\n          onMouseMove?.(event);\n        }}\n        onMouseLeave={(e: React.MouseEvent<HTMLImageElement>) => {\n          setIsMagnifierVisible(false);\n          onMouseLeave?.(e);\n        }}\n        ref={baseImageRef as any}\n        {...otherProps}\n      />\n      {!isHidden && createPortal(\n        <>\n          <div\n            className={classNames(\n              'magnifiedViewContainer',\n              classes?.magnifiedViewContainer,\n              !isMagnifierVisible && 'invisible'\n            )}\n            style={{\n              left: zoomedImageViewportRegion.x,\n              top: zoomedImageViewportRegion.y,\n              width: zoomedImageViewportRegion.width,\n              height: zoomedImageViewportRegion.height\n            }}\n          >\n            <div className={classNames('magnifiedViewInnerContainer', classes?.magnifiedViewInnerContainer)}>\n              <ImageElement\n                src={src}\n                className={classNames('magnifiedView', classes?.magnifiedView)}\n                style={Object.assign(\n                  {},\n                  {\n                    width: zoomedImageVisibleRegion.width,\n                    height: zoomedImageVisibleRegion.height,\n                    marginLeft: -zoomedImageVisibleRegion.x,\n                    marginTop: -zoomedImageVisibleRegion.y\n                  }\n                )}\n                ref={magnifiedImageRef}\n              />\n            </div>\n          </div>\n          {isMagnifierVisible && !!baseImageZoomIndicatorRegion.width && !!baseImageZoomIndicatorRegion.height && (\n            <div\n              className={classNames('magnifier', classes?.magnifier)}\n              style={{\n                left: baseImageZoomIndicatorRegion.x,\n                top: baseImageZoomIndicatorRegion.y,\n                width: baseImageZoomIndicatorRegion.width,\n                height: baseImageZoomIndicatorRegion.height\n              }}\n            />\n          )}\n        </>,\n        document.body\n      )}\n    </Fragment>\n  );\n};\nImageMagnifier.defaultProps = {\n  imageElement: 'img'\n};\n\nexport default ImageMagnifier;\n","import { useEffect, useRef, useState } from 'react';\nimport { Coordinate, Region } from './model';\n\ninterface GetBaseImageZoomIndicatorSizeParams {\n  baseImageBox: DOMRect | undefined;\n  zoomedImageViewportRegion: Region;\n  magnificationFactor: number;\n}\nconst getBaseImageZoomIndicatorSize = ({\n  baseImageBox,\n  zoomedImageViewportRegion,\n  magnificationFactor\n}: GetBaseImageZoomIndicatorSizeParams): Partial<Region> => {\n  if (!baseImageBox) return {};\n  const magnifiedViewAspectRatio = zoomedImageViewportRegion.width / zoomedImageViewportRegion.height;\n\n  return {\n    x: baseImageBox.left,\n    y: baseImageBox.top,\n    width:\n      baseImageBox.width <= baseImageBox.height\n        ? baseImageBox.width / magnificationFactor\n        : (baseImageBox.height / magnificationFactor) * magnifiedViewAspectRatio,\n    height:\n      baseImageBox.height <= baseImageBox.width\n        ? baseImageBox.height / magnificationFactor\n        : (baseImageBox.width / magnificationFactor) * magnifiedViewAspectRatio\n  };\n};\n\ninterface GetBaseImageZoomIndicatorPosition {\n  baseImageBox: DOMRect | undefined;\n  baseImageZoomIndicatorRegion: Region;\n  baseImageCursorCoordinate: Coordinate;\n  scrollY: number;\n}\nconst getBaseImageZoomIndicatorPosition = ({\n  baseImageBox,\n  baseImageZoomIndicatorRegion,\n  baseImageCursorCoordinate,\n  scrollY\n}: GetBaseImageZoomIndicatorPosition): Partial<Region> => {\n  if (!baseImageBox) return {};\n\n  const magnifierPointerLimiterMargin = {\n    x: Math.round(baseImageZoomIndicatorRegion.width / 2),\n    y: Math.round(baseImageZoomIndicatorRegion.height / 2)\n  };\n  const magnifierPointerLimiterBox = {\n    top: baseImageBox.top + magnifierPointerLimiterMargin.y,\n    left: baseImageBox.left + magnifierPointerLimiterMargin.x,\n    bottom: baseImageBox.bottom - magnifierPointerLimiterMargin.y,\n    right: baseImageBox.right - magnifierPointerLimiterMargin.x\n  };\n\n  let adjustedX = 0;\n  let adjustedY = 0;\n\n  if (baseImageCursorCoordinate.x < magnifierPointerLimiterBox.left) {\n    adjustedX = baseImageBox.left;\n  } else if (baseImageCursorCoordinate.x > magnifierPointerLimiterBox.right) {\n    adjustedX = baseImageBox.right - baseImageZoomIndicatorRegion.width;\n  } else {\n    adjustedX = baseImageCursorCoordinate.x - magnifierPointerLimiterMargin.x;\n  }\n\n  if (baseImageCursorCoordinate.y < magnifierPointerLimiterBox.top) {\n    adjustedY = baseImageBox.top;\n  } else if (baseImageCursorCoordinate.y > magnifierPointerLimiterBox.bottom) {\n    adjustedY = baseImageBox.bottom - baseImageZoomIndicatorRegion.height;\n  } else {\n    adjustedY = baseImageCursorCoordinate.y - magnifierPointerLimiterMargin.y;\n  }\n\n  return {\n    x: adjustedX,\n    y: adjustedY + scrollY\n  };\n};\n\ninterface GetZoomedImageSizeParams {\n  baseImageBox: DOMRect | undefined;\n  baseImageZoomIndicatorRegion: Region;\n  zoomedImageViewportRegion: Region;\n}\nconst getZoomedImageSize = ({\n  baseImageBox,\n  baseImageZoomIndicatorRegion,\n  zoomedImageViewportRegion\n}: GetZoomedImageSizeParams): Partial<Region> => {\n  if (!baseImageBox) return {};\n\n  const zoomedImageViewportWidthMagnificationFactor =\n    zoomedImageViewportRegion.width / baseImageZoomIndicatorRegion.width;\n  const zoomedImageViewportHeightMagnificationFactor =\n    zoomedImageViewportRegion.height / baseImageZoomIndicatorRegion.height;\n  const zoomedImageWidth = baseImageBox?.width * zoomedImageViewportWidthMagnificationFactor;\n  const zoomedImageHeight = baseImageBox?.height * zoomedImageViewportHeightMagnificationFactor;\n\n  return {\n    width: zoomedImageWidth,\n    height: zoomedImageHeight\n  };\n};\n\ninterface GetZoomedImageVisibleRegionOffsetParams {\n  baseImageBox: DOMRect | undefined;\n  baseImageZoomIndicatorRegion: Region;\n  zoomedImageViewportRegion: Region;\n  zoomedImageVisibleRegion: Region;\n  scrollY: number;\n}\nconst getZoomedImageVisibleRegionOffset = ({\n  baseImageBox,\n  baseImageZoomIndicatorRegion,\n  zoomedImageViewportRegion,\n  zoomedImageVisibleRegion,\n  scrollY\n}: GetZoomedImageVisibleRegionOffsetParams): Partial<Region> => {\n  if (!baseImageBox) return {};\n\n  const baseImageTraversedPixelsX = baseImageZoomIndicatorRegion.x - baseImageBox.x;\n  const baseImageTraversedPixelsY = baseImageZoomIndicatorRegion.y - (baseImageBox.y + scrollY);\n  const baseImageTraversablePixelsX = baseImageBox.width - baseImageZoomIndicatorRegion.width;\n  const baseImageTraversablePixelsY = baseImageBox.height - baseImageZoomIndicatorRegion.height;\n  const baseImageTraversedPercentageX = baseImageTraversedPixelsX / baseImageTraversablePixelsX;\n  const baseImageTraversedPercentageY = baseImageTraversedPixelsY / baseImageTraversablePixelsY;\n\n  const zoomedImageTraversablePixelsX = zoomedImageVisibleRegion.width - zoomedImageViewportRegion.width;\n  const zoomedImageTraversablePixelsY = zoomedImageVisibleRegion.height - zoomedImageViewportRegion.height;\n  const zoomedImageTraversedPixelsX = baseImageTraversedPercentageX * zoomedImageTraversablePixelsX;\n  const zoomedImageTraversedPixelsY = baseImageTraversedPercentageY * zoomedImageTraversablePixelsY;\n\n  return {\n    x: zoomedImageTraversedPixelsX,\n    y: zoomedImageTraversedPixelsY\n  };\n};\n\ninterface UseMagnifiedViewProcessorParams {\n  magnificationFactor?: number;\n  isHidden?: boolean;\n}\nexport const useMagnifiedViewProcessor = (params?: UseMagnifiedViewProcessorParams) => {\n  const defaultParams = { magnificationFactor: 2.0, isHidden: false };\n  const { magnificationFactor, isHidden } = Object.assign({}, defaultParams, params);\n\n  const baseImageRef = useRef<HTMLImageElement>(null);\n  const [scrollY, setScrollY] = useState(window.scrollY);\n  const [baseImageZoomIndicatorRegion, setBaseImageZoomIndicatorRegion] = useState<Region>({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  });\n  const [baseImageCursorCoordinate, setBaseImageCursorCoordinate] = useState<Coordinate>({ x: 0, y: 0 });\n  const [zoomedImageViewportRegion, setZoomedImageViewportRegion] = useState<Region>({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  });\n  // x, y indicates offset from the top-left corner, where width and height are the size of the zoomed image\n  const [zoomedImageVisibleRegion, setZoomedImageVisibleRegion] = useState<Region>({ x: 0, y: 0, width: 0, height: 0 });\n\n  // Convenience updaters\n  const updateBaseImageZoomIndicatorRegion = (region: Partial<Region>) =>\n    setBaseImageZoomIndicatorRegion((prev) => ({ ...prev, ...region }));\n  const updateBaseImageCursorCoordinate = ({ x, y }: Coordinate) => {\n    const normalizedX = Math.max(x, 0);\n    const normalizedY = Math.max(y, 0);\n    setBaseImageCursorCoordinate({ x: normalizedX, y: normalizedY });\n  };\n  const updateZoomedImageViewportRegion = (region: Partial<Region>) => {\n    setZoomedImageViewportRegion((prev) => ({ ...prev, ...region }));\n  };\n  const updateZoomedImageVisibleRegion = (region: Partial<Region>) =>\n    setZoomedImageVisibleRegion((prev) => ({ ...prev, ...region }));\n\n  // Processors\n  useEffect(() => {\n    const handleScroll = () => {\n      setScrollY(window.scrollY);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  useEffect(() => {\n    const baseImageBox = baseImageRef.current?.getBoundingClientRect();\n    updateBaseImageZoomIndicatorRegion(\n      getBaseImageZoomIndicatorSize({ baseImageBox, zoomedImageViewportRegion, magnificationFactor })\n    );\n  }, [baseImageRef.current, zoomedImageViewportRegion.width, zoomedImageViewportRegion.height, magnificationFactor, isHidden]);\n\n  useEffect(() => {\n    const baseImageBox = baseImageRef.current?.getBoundingClientRect();\n    updateBaseImageZoomIndicatorRegion(\n      getBaseImageZoomIndicatorPosition({\n        baseImageBox,\n        baseImageZoomIndicatorRegion,\n        baseImageCursorCoordinate,\n        scrollY\n      })\n    );\n  }, [\n    baseImageRef.current,\n    baseImageZoomIndicatorRegion.width,\n    baseImageZoomIndicatorRegion.height,\n    baseImageCursorCoordinate.x,\n    baseImageCursorCoordinate.y,\n    isHidden\n  ]);\n\n  useEffect(() => {\n    const baseImageBox = baseImageRef.current?.getBoundingClientRect();\n    updateZoomedImageVisibleRegion(\n      getZoomedImageSize({ baseImageBox, baseImageZoomIndicatorRegion, zoomedImageViewportRegion })\n    );\n  }, [\n    baseImageRef.current,\n    baseImageZoomIndicatorRegion.width,\n    baseImageZoomIndicatorRegion.height,\n    zoomedImageViewportRegion.width,\n    zoomedImageViewportRegion.height,\n    isHidden\n  ]);\n\n  useEffect(() => {\n    const baseImageBox = baseImageRef.current?.getBoundingClientRect();\n    updateZoomedImageVisibleRegion(\n      getZoomedImageVisibleRegionOffset({\n        baseImageBox,\n        baseImageZoomIndicatorRegion,\n        zoomedImageViewportRegion,\n        zoomedImageVisibleRegion,\n        scrollY\n      })\n    );\n  }, [\n    baseImageRef.current,\n    baseImageZoomIndicatorRegion.width,\n    baseImageZoomIndicatorRegion.height,\n    baseImageZoomIndicatorRegion.x,\n    baseImageZoomIndicatorRegion.y,\n    zoomedImageViewportRegion.width,\n    zoomedImageViewportRegion.height,\n    zoomedImageVisibleRegion.width,\n    zoomedImageVisibleRegion.height,\n    scrollY,\n    isHidden\n  ]);\n\n  return [\n    {\n      baseImageZoomIndicatorRegion,\n      zoomedImageViewportRegion,\n      zoomedImageVisibleRegion,\n      scrollY\n    },\n    {\n      baseImageRef,\n      updateBaseImageCursorCoordinate,\n      updateZoomedImageViewportRegion\n    }\n  ] as const;\n};\n"],"names":[],"version":3,"file":"index.js.map"}